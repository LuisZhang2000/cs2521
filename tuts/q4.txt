1.

int printHeightDiff (BSTree t) {

	if (t == NULL) {
		return 0;
	}
    else if (t->left == NULL && t->right == NULL) {
        return 0;
    }
 
	int leftH = printHeightDiff (t->left);
	int rightH = printHeightDiff (t->right);
	int diff = leftH - rightH;

	printf ("Node Value = %d, Diff = %d\n", t->data, diff);
 
	if (leftH > rightH) {
		return leftH + 1;
	} else {
		return rightH + 1;
	}
}

2. 

int isHeightBalanced (BSTree t) {

    if (t == NULL) {
        return 0;
    }
    else if (t->left == NULL && t->right == NULL) {
        return 0;
    }

    int left = isHeightBalanced(t->left);
    int right = isHeightBalanced(t->right);
    int diff = left - right;

    if (diff > 1 || diff < -1) {
        return NOT_HEIGHT_BALANCED;
    }

    if (left > right) {
        return 1 + isHeightBalanced(left);
    }
    else {
        return 1 + isHeightBalanced(right);
    }
}

3.

int BSTWidth(BSTree t) {

    int left = BSTWidth(t->left);
    int right = BSTWidth(t->right);

    if (t == NULL) {
        return 0;
    }
    else if (t->left == NULL && t->right == NULL) {
        return 3;
    }
    else if (t->left != NULL) {
        return 3 + left;
    else if (t->right != NULL) {
        return 3 + right;
    }

}





Solutions

int printHeightDiff(BSTree t) {
    if (t == NULL) {
        return -1;
    }

    int lh = printHeightDiff(t->left);
    int rh = printHeightDiff(t->right);
    printf("At node %d, difference is %d\n", t->value, lh - rh);
    return 1 + (lh > rh ? lh : rh);

}

int isHeightBalanced(BSTree t) {
    if (t == NULL) {
        return -1;
    }

    int lh = isHeightBalanced(t->left);
    int rh = isHeightBalanced(t->right);

    if (lh == NOT_HEIGHT_BALANCED || rh == NOT_HEIGHT_BALANCED) {
        return NOT_HEIGHT_BALANCED;
    }

    if (abs(lh - rh) > 1) {
        return NOT_HEIGHT_BALANCED;
    } else {
        return 1 + (lh > rh ? lh : rh);
    }
}

int BSTWidth(BSTree t) {

    if (t == NULL) {
        return 0;
    } else {
        return 3 + BSTWidth(t->left) + BSTWidth(t->right);
    }

}

Tree deleteLeaves(Tree t) {
    if (t == NULL) {
        return NULL;
    } else if (t->left == NULL && t->right == NULL) {
        free(t);
        return NULL;
    } else {
        t->left = deleteLeaves(t->left);
        t->right = deleteLeaves(t->right);
        return t;
    }


}